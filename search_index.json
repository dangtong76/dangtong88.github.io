[
["pipe.html", "Chapter 8 Pipe 8.1 Pipe 란 8.2 파이프를 사용하기 위한 라이브러리", " Chapter 8 Pipe 8.1 Pipe 란 R에서 Pipe 연산자는 여러개의 작업들을 순차적으로 명확하게 수행 하는데 많은 도움을 줍니다. 8.2 파이프를 사용하기 위한 라이브러리 파이프 연산자는 %&gt;% 라고 쓰며, Stefan Milton Bache 가 만든 magrittr 라는 패키지에 있습니다. tidyverse를 로딩 하면 안에 포함 되어 있습니다. library(magrittr) library(shiny) # Define UI for app that draws a histogram ---- ui &lt;- fluidPage( # App title ---- titlePanel(&quot;Hello Shiny!&quot;), # Sidebar layout with input and output definitions ---- sidebarLayout( # Sidebar panel for inputs ---- sidebarPanel( # Input: Slider for the number of bins ---- sliderInput(inputId = &quot;bins&quot;, label = &quot;Number of bins:&quot;, min = 1, max = 50, value = 30) ), # Main panel for displaying outputs ---- mainPanel( # Output: Histogram ---- plotOutput(outputId = &quot;distPlot&quot;) ) ) ) # Define server logic required to draw a histogram ---- server &lt;- function(input, output) { # Histogram of the Old Faithful Geyser Data ---- # with requested number of bins # This expression that generates a histogram is wrapped in a call # to renderPlot to indicate that: # # 1. It is &quot;reactive&quot; and therefore should be automatically # re-executed when inputs (input$bins) change # 2. Its output type is a plot output$distPlot &lt;- renderPlot({ x &lt;- faithful$waiting bins &lt;- seq(min(x), max(x), length.out = input$bins + 1) hist(x, breaks = bins, col = &quot;#75AADB&quot;, border = &quot;white&quot;, xlab = &quot;Waiting time to next eruption (in mins)&quot;, main = &quot;Histogram of waiting times&quot;) }) } # Create Shiny app ---- shinyApp(ui = ui, server = server) Shiny applications not supported in static R Markdown documents "]
]
